name: "release"

env:
  SUBWASM_VERSION: 0.18.0

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Branch or commit to build from"
        required: true
        default: "main"
      release_name:
        description: "Name of the new release (e.g Polkadot stable2412)"
        required: true
      release_tag:
        description: "Tag of the new release (e.g. polkadot-stable2412)"
        required: true

jobs:
  srtool:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Set Runtime
        run: echo "RUNTIME=dev" >> $GITHUB_ENV

      - name: Cache runtime target dir
        uses: actions/cache@v4
        with:
          path: "${{ github.workspace }}/runtime/${{ env.RUNTIME }}/target"
          key: srtool-target-${{ env.RUNTIME }}-${{ github.sha }}
          restore-keys: |
            srtool-target-${{ env.RUNTIME }}-
            srtool-target-

      - name: Build ${{ env.RUNTIME }} runtime
        id: srtool_build
        uses: chevdor/srtool-actions@v0.9.2
        env:
          BUILD_OPTS: "--features on-chain-release-build"
        with:
          chain: ${{ env.RUNTIME }}
          package: "parachain-runtime"
          runtime_dir: "runtime/${{ env.RUNTIME }}"

      - name: Store srtool digest to disk
        run: echo '${{ steps.srtool_build.outputs.json }}' | jq . > ${{ env.RUNTIME }}-srtool-digest.json

      - name: Install subwasm ${{ env.SUBWASM_VERSION }}
        run: |
          wget https://github.com/chevdor/subwasm/releases/download/v${{ env.SUBWASM_VERSION }}/subwasm_linux_amd64_v${{ env.SUBWASM_VERSION }}.deb
          sudo dpkg -i subwasm_linux_amd64_v${{ env.SUBWASM_VERSION }}.deb
          subwasm --version

      - name: Show Runtime information
        run: |
          subwasm info ${{ steps.srtool_build.outputs.wasm }}
          subwasm --json info ${{ steps.srtool_build.outputs.wasm }} > ${{ env.RUNTIME }}-info.json
          subwasm --json info ${{ steps.srtool_build.outputs.wasm_compressed }} > ${{ env.RUNTIME }}-info_compressed.json

      - name: Extract the metadata
        run: |
          subwasm meta ${{ steps.srtool_build.outputs.wasm }}
          subwasm --json meta ${{ steps.srtool_build.outputs.wasm }} > ${{ env.RUNTIME }}-metadata.json

      - name: Archive Subwasm results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RUNTIME }}-info
          path: |
            ${{ env.RUNTIME }}-info.json
            ${{ env.RUNTIME }}-info_compressed.json
            ${{ env.RUNTIME }}-metadata.json

  build-node:
    runs-on: ${{ matrix.platform.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        platform:
          - os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - os: macos-14
            target: aarch64-apple-darwin
          - os: macos-14
            target: x86_64-apple-darwin
    env:
      RUSTFLAGS: "${{ matrix.platform.target == 'aarch64-unknown-linux-gnu' && '-C linker=aarch64-linux-gnu-gcc' || '' }}"
      path: "target/${{ matrix.platform.target }}/production"
      package: "parachain-template-node-${{ matrix.platform.target }}.tar.gz"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.ref }}

      - name: Install dependencies (Linux)
        if: contains(matrix.platform.target, 'linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version

      - name: Install dependencies (macOS)
        if: contains(matrix.platform.target, 'apple')
        run: |
          brew install protobuf
          protoc --version

      - name: Add target
        run: rustup target add ${{ matrix.platform.target }}

      - name: Build node
        run: cargo build --release -p parachain-template-node --target ${{ matrix.platform.target }}

      - name: Package binary
        run: |
          mkdir -p artifacts
          cp ${{ env.path }}/parachain-template-node artifacts/
          cd artifacts
          if contains('${{ matrix.platform.target }}', 'linux'); then
            sha256sum parachain-template-node > parachain-template-node.sha256
          else
            shasum -a 256 parachain-template-node > parachain-template-node.sha256
          fi
          tar -czf ${{ env.package }} parachain-template-node parachain-template-node.sha256

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: parachain-template-node-${{ matrix.platform.target }}
          path: artifacts/${{ env.package }}

  create-release:
    needs: [build-node, srtool]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts

      - name: Create a GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          release_name: ${{ github.event.inputs.release_name }}
          target_commitish: ${{ github.event.inputs.ref }}
          files: release-artifacts/**/*.tar.gz